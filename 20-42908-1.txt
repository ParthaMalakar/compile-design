#include <GL/gl.h>
#include <GL/glut.h>
#include<math.h>
void display(void)
{
/* clear all pixels */
    glClear (GL_COLOR_BUFFER_BIT);
/* draw white polygon (rectangle) with corners at
* (0.25, 0.25, 0.0) and (0.75, 0.75, 0.0)
*/
    //glColor3f (1.0, 1.0, 1.0);


	glBegin(GL_QUADS); //Begin quadrilateral coordinates
	//Trapezoid-1
	glColor3f (0.0, 5.0, 0.0);
	glVertex3f(0.2f, 0.1f, 0.0f);
	glVertex3f(0.7f, 0.1f, 0.0f);
	glVertex3f(0.8f, 0.8f, 0.0f);
	glVertex3f(0.3f, 0.8f, 0.0f);
	glEnd(); //End quadrilateral coordinates

	glBegin(GL_QUADS); //Begin quadrilateral coordinates
	//Trapezoid-2
	glColor3f (1.0, 0.0, 0.0);
	glVertex3f(0.5f, 0.7f, 0.0f);
	glVertex3f(0.6f, 0.7f, 0.0f);
	glVertex3f(0.7f, 0.6f, 0.0f);
	glVertex3f(0.4f, 0.6f, 0.0f);
	glEnd(); //End quadrilateral coordinates

	glBegin(GL_LINES);
	glColor3f(1.0f, 0.0f, 0.0f); // Red

	glVertex2f(0.8f, 0.8f);    // x, y
	glVertex2f(0.8f, 0.1f);    // x, y


	glVertex2f(0.8f, 0.1f);    // x, y
	glVertex2f(0.7f, 0.1f);    // x, y
	glEnd();

    glBegin(GL_QUADS); //Begin quadrilateral coordinates
	//rectangle
	glColor3f (1.0, 1.0, 0.0);
	glVertex3f(0.2f, 0.2f, 0.0f);
	glVertex3f(0.2f, 0.1f, 0.0f);
	glVertex3f(0.7f, 0.1f, 0.0f);
	glVertex3f(0.7f, 0.2f, 0.0f);
	glEnd();
	float x1,y1,x2,y2;
float angle;
double radius=0.1;

x1 = 0.5,y1=0.4;
glColor3f(0.0,0.0,1.0);

glBegin(GL_TRIANGLE_FAN);
glVertex2f(x1,y1);

for (angle=1.0f;angle<361.0f;angle+=0.2)
{
    x2 = x1+sin(angle)*radius;
    y2 = y1+cos(angle)*radius;
    glVertex2f(x2,y2);
}

glEnd();//End quadrilateral coordinates

    /* don't wait!
    * start processing buffered OpenGL

    */
    glFlush ();
}
void init (void)
{
    /* select clearing (background) color */
    glClearColor (0.0, 0.0, 0.0, 0.0);
    /* initialize viewing values */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0.0, 1.0, 0.0, 1.0, -10.0, 10.0);
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (600, 600);
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("TASK-3");
    init ();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0; /* ISO C requires main to return int. */
}

